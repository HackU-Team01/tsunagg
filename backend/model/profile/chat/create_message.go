package chat

import (
	"fmt"
	"strings"

	"github.com/slack-go/slack"

	"tsunagg/backend/model/db"
)

const logoURL = "https://drive.google.com/uc?id=1fX73VMcQJ0TkOja8rYRAmcfQgHtDpnvm"

// 空のメッセージブロック
type EmptyBlock struct{}

func (s EmptyBlock) BlockType() slack.MessageBlockType { return "" }

// メッセージ文を生成する
func createMessage(p *db.AutoGenerated) slack.MsgOption {
	return slack.MsgOptionBlocks(removeEmpty(
		buildSection("名前", p.Data.Name),
		buildSection("出身地", generatePlaceString(p.Data.Attribute.PlaceBorn)),
		buildSection("居住地", generatePlaceString(p.Data.Attribute.PlaceLive)),
		buildSection("趣味", generateHobbyString(p.Data.Attribute.Hobby)),
		buildSection("最後に一言", p.Data.Sentence),
		slack.NewDividerBlock(),
		buildFooter(
			slack.NewImageBlockElement(logoURL, ""),
			markdownBlock("Powered by *tsunagg*"),
		),
	)...)
}

// セクションを生成する．
// content が空の場合は，空のブロック（EmptyBlock）が生成されるようにする．
// そうしないと，title だけが表示されてしまい不格好
func buildSection(title string, content string) slack.Block {
	if len(content) == 0 {
		return EmptyBlock{}
	}
	text := fmt.Sprintf("*■%s*\n%s", title, content)
	return &slack.SectionBlock{
		Type: slack.MBTSection,
		Text: markdownBlock(text),
	}
}

func buildFooter(mixedElements ...slack.MixedElement) *slack.ContextBlock {
	return &slack.ContextBlock{
		Type: slack.MBTContext,
		ContextElements: slack.ContextElements{
			Elements: mixedElements,
		},
	}
}

// 出身地・居住地部分の文字列を生成する．
// ["地域", "都道府県"] の形で入力されるので，最後の要素を取得
func generatePlaceString(place []string) string {
	if len(place) == 0 { // 空の場合
		return ""
	} else {
		return place[len(place)-1]
	}
}

// 趣味部分の文字列を生成する．
// ["趣味1", ..., "趣味n"] の形で入力されるので，箇条書きにして出力．
// Slack API では箇条書きを Markdown 形式で書けないみたいなので直書き
func generateHobbyString(hobbies []string) string {
	s := []string{}
	for _, hobby := range hobbies {
		if len(hobby) > 0 {
			s = append(s, "◦ "+hobby)
		}
	}
	return strings.Join(s, "\n")
}

func markdownBlock(text string) *slack.TextBlockObject {
	return &slack.TextBlockObject{
		Type: slack.MarkdownType,
		Text: text,
	}
}

// Block のリストから空のブロック（EmptyBlock）を取り除く
func removeEmpty(blocks ...slack.Block) []slack.Block {
	new_blocks := []slack.Block{}
	for _, block := range blocks {
		switch block.(type) {
		case EmptyBlock:
			continue
		default:
			new_blocks = append(new_blocks, block)
		}
	}
	return new_blocks
}
